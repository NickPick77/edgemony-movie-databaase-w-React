{"version":3,"file":"static/js/edit.d9c3a861.chunk.js","mappings":"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","sources":["webpack://edgemony-movie-db/./src/components/AddMovieForm/styles.module.scss?5880","components/AddMovieForm/index.jsx","webpack://edgemony-movie-db/./src/components/CardItem/styles.module.scss?af11","components/CardItem/index.jsx","webpack://edgemony-movie-db/./src/components/Modal/styles.module.scss?81d3","components/Modal/index.jsx","webpack://edgemony-movie-db/./src/pages/EditMovie/styles.module.scss?8226","pages/EditMovie/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"AddMovieForm_form\":\"styles_AddMovieForm_form__oQbox\"};","import { useState } from \"react\"\nimport { useLocation } from \"react-router-dom\";\nimport { POST, PUT } from \"../../utils/utils\";\nimport styles from \"./styles.module.scss\";\n\nexport function AddMovieForm({ setModalVisibility, callType, text }) {\n    const [title, setTitle] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [imgUrl, setImgUrl] = useState(\"\");\n    const [genres, setGenrese] = useState(\"\");\n\n    let location = useLocation();\n    const movieId = location.pathname.split(\"/\").reverse()[0];\n\n    const unStringifyGenres = (genres) => genres.split(\",\");\n\n    const addNewMovie = (e) => {\n        e.preventDefault();\n\n        if (callType === \"POST\") {\n            POST(\"\", {\n                title,\n                year,\n                imgUrl,\n                genres: unStringifyGenres(genres),\n                description,\n            });\n\n            setModalVisibility(true);\n        } else {\n            PUT(movieId, {\n                title,\n                year,\n                imgUrl,\n                genres: unStringifyGenres(genres),\n                description,\n            });\n            setModalVisibility(true);\n        }\n    };\n\n\n    return (\n        <form onSubmit={addNewMovie} className={styles.AddMovieForm_form}>\n            <label htmlFor=\"title\">Title</label>\n            <input\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                required\n            />\n            <label htmlFor=\"\">Year</label>\n            <input\n                value={year}\n                onChange={(e) => setYear(e.target.value)}\n                type=\"text\"\n                id=\"year\"\n                name=\"year\"\n                required\n            />\n            <label htmlFor=\"\">Description</label>\n            <input\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                type=\"text\"\n                id=\"description\"\n                name=\"year\"\n                required\n            />\n            <label htmlFor=\"imgUrl\">Image Url</label>\n            <input\n                value={imgUrl}\n                onChange={(e) => setImgUrl(e.target.value)}\n                type=\"text\"\n                id=\"imgUrl\"\n                name=\"imgUrl\"\n                required\n            />\n            <label htmlFor=\"genres\">Genres</label>\n            <input\n                value={genres}\n                onChange={(e) => setGenrese(e.target.value)}\n                type=\"text\"\n                id=\"genres\"\n                name=\"genres\"\n                required\n            />\n            <input type=\"submit\" value={text} />\n        </form>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"CardItem\":\"styles_CardItem__QIsX0\",\"genre\":\"styles_genre__WQaj9\"};","\nimport { Link } from 'react-router-dom';\nimport styles from './styles.module.scss';\n\n\nexport function CardItem({ cardData, setModalVisibility, setMovieData, setModalInput }) {\n\n    const setDeleteId = () => {\n        setModalInput({ text: \"\", yes: \"yes\", no: \"no\" })\n        setModalVisibility(true);\n        setMovieData(cardData.id);\n    }\n\n    return (\n        <div className={styles.CardItem}  >\n            <button value={cardData.id} onClick={() => setDeleteId()}>‚ùå</button>\n            <Link to={`/edit-movie/${cardData.id}`}>\n                <h2>{cardData.title}</h2>\n            </Link>\n            <p>{cardData.year}</p>\n            <img src={cardData.img || cardData.poster} alt={cardData.title} />\n            <p>{cardData.description}</p>\n            <div className={styles.genre}>\n                <ul>\n                    {cardData.genres &&\n                        cardData.genres.map((genre, i) => (\n                            <li key={i}>{genre}</li>\n                        ))}\n                </ul>\n            </div>\n\n        </div>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Modal_Alert\":\"styles_Modal_Alert__Lkt4h\",\"green\":\"styles_green__n2xx4\",\"blue\":\"styles_blue__t4+e6\",\"red\":\"styles_red__u0Klw\",\"Modal_Confirm\":\"styles_Modal_Confirm__juqbN\",\"Button_Container\":\"styles_Button_Container__ribEm\",\"Modal_Button_Span\":\"styles_Modal_Button_Span__hxZP4\",\"Modal_Button_Confirm\":\"styles_Modal_Button_Confirm__gsFdY\",\"Modal_Button_Undo\":\"styles_Modal_Button_Undo__zi7kx\"};","import styles from \"./styles.module.scss\";\n\nexport function Modal({ isVisible, setVisibility, colorClass, modalInput, DeleteMovieData, deleteId }) {\n\n    //console.log(modalInput.yes)\n    const color = (colorClass === \"green\") ? styles.green : (colorClass === \"blue\") ? styles.blue : (colorClass === \"red\") ? styles.red : \"\"\n    return (\n        <>\n            {modalInput.text.length > 0 ?\n                isVisible && (\n                    <div className={`${styles.Modal_Alert} ${colorClass ? color : \"\"}`}>\n                        <p className={styles.Modal_paragraph}>{modalInput.text}</p>\n                    </div>\n                ) :\n                isVisible && (\n                    <div className={styles.Modal_Confirm}>\n                        <p>Vuoi davvero eliminare il Film?</p>\n                        <div className={styles.Button_Container}>\n                            <button\n                                className={styles.Modal_Button_Confirm}\n                                onClick={(() => DeleteMovieData(deleteId))}\n                            >\n                                <span className={styles.Modal_Button_Span}>{modalInput.yes}</span>\n                            </button>\n                            <button\n                                className={styles.Modal_Button_Undo}\n                                onClick={(() => setVisibility(false))}\n                            >\n                                <span className={styles.Modal_Button_Span}>{modalInput.no}</span>\n                            </button>\n                        </div>\n                    </div>\n                )}\n        </>\n    );\n}\n//${colorClass ? color : \"\"}","// extracted by mini-css-extract-plugin\nexport default {\"EditMovie\":\"styles_EditMovie__0ZtzC\"};","import { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { GET } from \"../../utils/utils\";\n\nimport { Modal } from \"../../components/Modal\";\nimport { CardItem } from \"../../components/CardItem\";\nimport { AddMovieForm } from \"../../components/AddMovieForm\";\n\nimport styles from \"./styles.module.scss\";\n\n\nexport default function EditMovie({ DeleteMovieData, modalInput, setModalInput, modalVisibility, setModalVisibility, movieData, setMovieData }) {\n    const location = useLocation();\n    const [update, setUpdate] = useState(false)\n    const movieId = location.pathname.split(\"/\").reverse()[0];\n\n    useEffect(() => {\n        GET(movieId).then((data) => setMovieData(data));\n        //eslint-disable-next-line\n    }, [update]);\n\n\n\n    return (\n        <section className={styles.EditMovie}>\n            <CardItem\n                cardData={movieData}\n                setMovieData={setMovieData}\n                update={update}\n                setUpdate={setUpdate}\n                setModalInput={setModalInput}\n                setModalVisibility={setModalVisibility}\n            />\n            <AddMovieForm\n                setModalVisibility={setModalVisibility}\n                callType=\"PUT\"\n                text={\"Update Movie\"}\n\n            />\n            <Modal\n                modalInput={modalInput}\n                isVisible={modalVisibility}\n                setVisibility={setModalVisibility}\n                colorClass={\"blue\"}\n                DeleteMovieData={DeleteMovieData}\n                deleteId={movieData}\n            />\n        </section>\n    );\n}"],"names":["AddMovieForm","setModalVisibility","callType","text","useState","title","setTitle","year","setYear","description","setDescription","imgUrl","setImgUrl","genres","setGenrese","movieId","useLocation","pathname","split","reverse","unStringifyGenres","onSubmit","e","preventDefault","POST","PUT","className","styles","htmlFor","value","onChange","target","type","id","name","required","CardItem","cardData","setMovieData","setModalInput","onClick","yes","no","to","src","img","poster","alt","map","genre","i","Modal","isVisible","setVisibility","colorClass","modalInput","DeleteMovieData","deleteId","color","length","EditMovie","modalVisibility","movieData","location","update","setUpdate","useEffect","GET","then","data"],"sourceRoot":""}